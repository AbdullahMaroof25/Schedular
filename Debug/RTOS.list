
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000092c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ac0  08000ac8  00010ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ac0  08000ac0  00010ac8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ac0  08000ac0  00010ac8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ac0  08000ac8  00010ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ac0  08000ac0  00010ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ac4  08000ac4  00010ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000000  08000ac8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08000ac8  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010ac8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c36  00000000  00000000  00010af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004ad  00000000  00000000  0001172e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000148  00000000  00000000  00011be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000f0  00000000  00000000  00011d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001111  00000000  00000000  00011e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000749  00000000  00000000  00012f29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005651  00000000  00000000  00013672  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00018cc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000384  00000000  00000000  00018d40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000aa8 	.word	0x08000aa8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000aa8 	.word	0x08000aa8

080001d4 <rcc_setSystemClk>:


#include "rcc.h"


void rcc_setSystemClk(rcc_sysClk_t sysClk){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	switch(sysClk){
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d017      	beq.n	8000214 <rcc_setSystemClk+0x40>
 80001e4:	2b02      	cmp	r3, #2
 80001e6:	d02a      	beq.n	800023e <rcc_setSystemClk+0x6a>
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d000      	beq.n	80001ee <rcc_setSystemClk+0x1a>
		/* select PLL as sys clock*/
		RCC_CFGR_REG|=PLL_SW;
		break;

	}
}
 80001ec:	e03c      	b.n	8000268 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,HSION_BIT);
 80001ee:	4b21      	ldr	r3, [pc, #132]	; (8000274 <rcc_setSystemClk+0xa0>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a20      	ldr	r2, [pc, #128]	; (8000274 <rcc_setSystemClk+0xa0>)
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,HSION_READY_FLAG_BIT)==0);
 80001fa:	bf00      	nop
 80001fc:	4b1d      	ldr	r3, [pc, #116]	; (8000274 <rcc_setSystemClk+0xa0>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	085b      	lsrs	r3, r3, #1
 8000202:	f003 0301 	and.w	r3, r3, #1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d0f8      	beq.n	80001fc <rcc_setSystemClk+0x28>
		RCC_CFGR_REG|=HSI_SW;
 800020a:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <rcc_setSystemClk+0xa4>)
 800020c:	4a1a      	ldr	r2, [pc, #104]	; (8000278 <rcc_setSystemClk+0xa4>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	6013      	str	r3, [r2, #0]
		break;
 8000212:	e029      	b.n	8000268 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,HSEON_BIT);
 8000214:	4b17      	ldr	r3, [pc, #92]	; (8000274 <rcc_setSystemClk+0xa0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a16      	ldr	r2, [pc, #88]	; (8000274 <rcc_setSystemClk+0xa0>)
 800021a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800021e:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,HSEON_READY_FLAG_BIT)==0);
 8000220:	bf00      	nop
 8000222:	4b14      	ldr	r3, [pc, #80]	; (8000274 <rcc_setSystemClk+0xa0>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	0c5b      	lsrs	r3, r3, #17
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d0f8      	beq.n	8000222 <rcc_setSystemClk+0x4e>
		RCC_CFGR_REG|=HSE_SW;
 8000230:	4b11      	ldr	r3, [pc, #68]	; (8000278 <rcc_setSystemClk+0xa4>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a10      	ldr	r2, [pc, #64]	; (8000278 <rcc_setSystemClk+0xa4>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6013      	str	r3, [r2, #0]
		break;
 800023c:	e014      	b.n	8000268 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,PLLON_BIT);
 800023e:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <rcc_setSystemClk+0xa0>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a0c      	ldr	r2, [pc, #48]	; (8000274 <rcc_setSystemClk+0xa0>)
 8000244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000248:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,PLLON_READY_FLAG_BIT)==0);
 800024a:	bf00      	nop
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <rcc_setSystemClk+0xa0>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	0e5b      	lsrs	r3, r3, #25
 8000252:	f003 0301 	and.w	r3, r3, #1
 8000256:	2b00      	cmp	r3, #0
 8000258:	d0f8      	beq.n	800024c <rcc_setSystemClk+0x78>
		RCC_CFGR_REG|=PLL_SW;
 800025a:	4b07      	ldr	r3, [pc, #28]	; (8000278 <rcc_setSystemClk+0xa4>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a06      	ldr	r2, [pc, #24]	; (8000278 <rcc_setSystemClk+0xa4>)
 8000260:	f043 0302 	orr.w	r3, r3, #2
 8000264:	6013      	str	r3, [r2, #0]
		break;
 8000266:	bf00      	nop
}
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	40021000 	.word	0x40021000
 8000278:	40021004 	.word	0x40021004

0800027c <rcc_enablePeriClk>:
void rcc_enablePeriClk(rcc_busId_t busId , u8 periId ){
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	460a      	mov	r2, r1
 8000286:	71fb      	strb	r3, [r7, #7]
 8000288:	4613      	mov	r3, r2
 800028a:	71bb      	strb	r3, [r7, #6]
	switch(busId){
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d00f      	beq.n	80002b2 <rcc_enablePeriClk+0x36>
 8000292:	2b02      	cmp	r3, #2
 8000294:	d018      	beq.n	80002c8 <rcc_enablePeriClk+0x4c>
 8000296:	2b00      	cmp	r3, #0
 8000298:	d000      	beq.n	800029c <rcc_enablePeriClk+0x20>
	case APB2:
		SET_BIT(RCC_APB2ENR_REG,periId);

		break;
	}
}
 800029a:	e020      	b.n	80002de <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_AHBENR_REG,periId);
 800029c:	4b13      	ldr	r3, [pc, #76]	; (80002ec <rcc_enablePeriClk+0x70>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	2101      	movs	r1, #1
 80002a4:	fa01 f202 	lsl.w	r2, r1, r2
 80002a8:	4611      	mov	r1, r2
 80002aa:	4a10      	ldr	r2, [pc, #64]	; (80002ec <rcc_enablePeriClk+0x70>)
 80002ac:	430b      	orrs	r3, r1
 80002ae:	6013      	str	r3, [r2, #0]
		break;
 80002b0:	e015      	b.n	80002de <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_APB1ENR_REG,periId);
 80002b2:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <rcc_enablePeriClk+0x74>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	79ba      	ldrb	r2, [r7, #6]
 80002b8:	2101      	movs	r1, #1
 80002ba:	fa01 f202 	lsl.w	r2, r1, r2
 80002be:	4611      	mov	r1, r2
 80002c0:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <rcc_enablePeriClk+0x74>)
 80002c2:	430b      	orrs	r3, r1
 80002c4:	6013      	str	r3, [r2, #0]
		break;
 80002c6:	e00a      	b.n	80002de <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_APB2ENR_REG,periId);
 80002c8:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <rcc_enablePeriClk+0x78>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	79ba      	ldrb	r2, [r7, #6]
 80002ce:	2101      	movs	r1, #1
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	4611      	mov	r1, r2
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <rcc_enablePeriClk+0x78>)
 80002d8:	430b      	orrs	r3, r1
 80002da:	6013      	str	r3, [r2, #0]
		break;
 80002dc:	bf00      	nop
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40021014 	.word	0x40021014
 80002f0:	4002101c 	.word	0x4002101c
 80002f4:	40021018 	.word	0x40021018

080002f8 <func1>:
#include "rcc.h"
#include "dio.h"
#include "Task.h"

void func1(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	DIO_writePin( PORTA_ID , PIN5_ID , LOGIC_HIGH );
 80002fc:	2201      	movs	r2, #1
 80002fe:	2105      	movs	r1, #5
 8000300:	2000      	movs	r0, #0
 8000302:	f000 f951 	bl	80005a8 <DIO_writePin>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}

0800030a <func2>:
void func2(void)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0
	DIO_writePin( PORTA_ID , PIN5_ID , LOGIC_LOW );
 800030e:	2200      	movs	r2, #0
 8000310:	2105      	movs	r1, #5
 8000312:	2000      	movs	r0, #0
 8000314:	f000 f948 	bl	80005a8 <DIO_writePin>
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}

0800031c <main>:

int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0
	rcc_setSystemClk(HSI);
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ff56 	bl	80001d4 <rcc_setSystemClk>
	rcc_enablePeriClk(AHB,IOPA_EN);
 8000328:	2111      	movs	r1, #17
 800032a:	2000      	movs	r0, #0
 800032c:	f7ff ffa6 	bl	800027c <rcc_enablePeriClk>
	DIO_setupPinMode( PORTA_ID , PIN5_ID , PIN_OUTPUT ); // Internal Led
 8000330:	2201      	movs	r2, #1
 8000332:	2105      	movs	r1, #5
 8000334:	2000      	movs	r0, #0
 8000336:	f000 f85b 	bl	80003f0 <DIO_setupPinMode>
	DIO_writePin( PORTA_ID , PIN5_ID , LOGIC_LOW );
 800033a:	2200      	movs	r2, #0
 800033c:	2105      	movs	r1, #5
 800033e:	2000      	movs	r0, #0
 8000340:	f000 f932 	bl	80005a8 <DIO_writePin>

	Task_t task1;
	task1.offset = 0 ;
 8000344:	2300      	movs	r3, #0
 8000346:	82fb      	strh	r3, [r7, #22]
	task1.periodicity = 1000;
 8000348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800034c:	827b      	strh	r3, [r7, #18]
	task1.periority = 0;
 800034e:	2300      	movs	r3, #0
 8000350:	753b      	strb	r3, [r7, #20]
	task1.state = Ready;
 8000352:	2301      	movs	r3, #1
 8000354:	743b      	strb	r3, [r7, #16]
	task1.f_ptr = func1;
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <main+0x78>)
 8000358:	60fb      	str	r3, [r7, #12]

	Task_t task2;
	task2.offset = 500 ;
 800035a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800035e:	817b      	strh	r3, [r7, #10]
	task2.periodicity = 1000;
 8000360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000364:	80fb      	strh	r3, [r7, #6]
	task2.periority = 1;
 8000366:	2301      	movs	r3, #1
 8000368:	723b      	strb	r3, [r7, #8]
	task2.state = Ready;
 800036a:	2301      	movs	r3, #1
 800036c:	713b      	strb	r3, [r7, #4]
	task2.f_ptr = func2;
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <main+0x7c>)
 8000370:	603b      	str	r3, [r7, #0]




	Task_t * temp1 = Create_Task(task1);
 8000372:	f107 030c 	add.w	r3, r7, #12
 8000376:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800037a:	f000 fa29 	bl	80007d0 <Create_Task>
 800037e:	61f8      	str	r0, [r7, #28]
	Task_t * temp2 = Create_Task(task2);
 8000380:	463b      	mov	r3, r7
 8000382:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000386:	f000 fa23 	bl	80007d0 <Create_Task>
 800038a:	61b8      	str	r0, [r7, #24]


	Os_Start();
 800038c:	f000 fb06 	bl	800099c <Os_Start>

    /* Loop forever */
	for(;;);
 8000390:	e7fe      	b.n	8000390 <main+0x74>
 8000392:	bf00      	nop
 8000394:	080002f9 	.word	0x080002f9
 8000398:	0800030b 	.word	0x0800030b

0800039c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800039c:	480d      	ldr	r0, [pc, #52]	; (80003d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a4:	480c      	ldr	r0, [pc, #48]	; (80003d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a6:	490d      	ldr	r1, [pc, #52]	; (80003dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a8:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <LoopForever+0xe>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ac:	e002      	b.n	80003b4 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b2:	3304      	adds	r3, #4

080003b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b8:	d3f9      	bcc.n	80003ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ba:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003bc:	4c0a      	ldr	r4, [pc, #40]	; (80003e8 <LoopForever+0x16>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c0:	e001      	b.n	80003c6 <LoopFillZerobss>

080003c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c4:	3204      	adds	r2, #4

080003c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c8:	d3fb      	bcc.n	80003c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ca:	f000 fb49 	bl	8000a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ce:	f7ff ffa5 	bl	800031c <main>

080003d2 <LoopForever>:

LoopForever:
    b LoopForever
 80003d2:	e7fe      	b.n	80003d2 <LoopForever>
  ldr   r0, =_estack
 80003d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e0:	08000ac8 	.word	0x08000ac8
  ldr r2, =_sbss
 80003e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e8:	200000a0 	.word	0x200000a0

080003ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ec:	e7fe      	b.n	80003ec <ADC1_2_IRQHandler>
	...

080003f0 <DIO_setupPinMode>:

/*******************************************************************************
 *                      Global Functions Definitions                           *
 *******************************************************************************/
STD_ReturnState DIO_setupPinMode(DIO_PortID portID, DIO_PinID pinID, DIO_PinMode pinMode)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
 80003fa:	460b      	mov	r3, r1
 80003fc:	71bb      	strb	r3, [r7, #6]
 80003fe:	4613      	mov	r3, r2
 8000400:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = E_OK;
 8000402:	2300      	movs	r3, #0
 8000404:	73fb      	strb	r3, [r7, #15]

	if((portID >= NUM_OF_PORTS) || (pinID >= NUM_OF_PINS_PER_PORT))
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b07      	cmp	r3, #7
 800040a:	d802      	bhi.n	8000412 <DIO_setupPinMode+0x22>
 800040c:	79bb      	ldrb	r3, [r7, #6]
 800040e:	2b0e      	cmp	r3, #14
 8000410:	d902      	bls.n	8000418 <DIO_setupPinMode+0x28>
	{
		Ret_Val = E_NOT_OK;
 8000412:	2301      	movs	r3, #1
 8000414:	73fb      	strb	r3, [r7, #15]
 8000416:	e0b1      	b.n	800057c <DIO_setupPinMode+0x18c>
	}

	else
	{
		switch(portID)
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	2b07      	cmp	r3, #7
 800041c:	f200 80ae 	bhi.w	800057c <DIO_setupPinMode+0x18c>
 8000420:	a201      	add	r2, pc, #4	; (adr r2, 8000428 <DIO_setupPinMode+0x38>)
 8000422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000426:	bf00      	nop
 8000428:	08000449 	.word	0x08000449
 800042c:	08000473 	.word	0x08000473
 8000430:	08000499 	.word	0x08000499
 8000434:	080004bf 	.word	0x080004bf
 8000438:	080004e5 	.word	0x080004e5
 800043c:	0800050b 	.word	0x0800050b
 8000440:	08000531 	.word	0x08000531
 8000444:	08000557 	.word	0x08000557
		{
		case PORTA_ID:
			DIOA_MODER_REG = (DIOA_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	79ba      	ldrb	r2, [r7, #6]
 8000450:	0052      	lsls	r2, r2, #1
 8000452:	2103      	movs	r1, #3
 8000454:	fa01 f202 	lsl.w	r2, r1, r2
 8000458:	43d2      	mvns	r2, r2
 800045a:	4013      	ands	r3, r2
 800045c:	7979      	ldrb	r1, [r7, #5]
 800045e:	79ba      	ldrb	r2, [r7, #6]
 8000460:	0052      	lsls	r2, r2, #1
 8000462:	fa01 f202 	lsl.w	r2, r1, r2
 8000466:	4611      	mov	r1, r2
 8000468:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800046c:	430b      	orrs	r3, r1
 800046e:	6013      	str	r3, [r2, #0]
			break;
 8000470:	e084      	b.n	800057c <DIO_setupPinMode+0x18c>

		case PORTB_ID:
			DIOB_MODER_REG = (DIOB_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000472:	4b46      	ldr	r3, [pc, #280]	; (800058c <DIO_setupPinMode+0x19c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	79ba      	ldrb	r2, [r7, #6]
 8000478:	0052      	lsls	r2, r2, #1
 800047a:	2103      	movs	r1, #3
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	43d2      	mvns	r2, r2
 8000482:	4013      	ands	r3, r2
 8000484:	7979      	ldrb	r1, [r7, #5]
 8000486:	79ba      	ldrb	r2, [r7, #6]
 8000488:	0052      	lsls	r2, r2, #1
 800048a:	fa01 f202 	lsl.w	r2, r1, r2
 800048e:	4611      	mov	r1, r2
 8000490:	4a3e      	ldr	r2, [pc, #248]	; (800058c <DIO_setupPinMode+0x19c>)
 8000492:	430b      	orrs	r3, r1
 8000494:	6013      	str	r3, [r2, #0]
			break;
 8000496:	e071      	b.n	800057c <DIO_setupPinMode+0x18c>

		case PORTC_ID:
			DIOC_MODER_REG = (DIOC_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000498:	4b3d      	ldr	r3, [pc, #244]	; (8000590 <DIO_setupPinMode+0x1a0>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	79ba      	ldrb	r2, [r7, #6]
 800049e:	0052      	lsls	r2, r2, #1
 80004a0:	2103      	movs	r1, #3
 80004a2:	fa01 f202 	lsl.w	r2, r1, r2
 80004a6:	43d2      	mvns	r2, r2
 80004a8:	4013      	ands	r3, r2
 80004aa:	7979      	ldrb	r1, [r7, #5]
 80004ac:	79ba      	ldrb	r2, [r7, #6]
 80004ae:	0052      	lsls	r2, r2, #1
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a36      	ldr	r2, [pc, #216]	; (8000590 <DIO_setupPinMode+0x1a0>)
 80004b8:	430b      	orrs	r3, r1
 80004ba:	6013      	str	r3, [r2, #0]
			break;
 80004bc:	e05e      	b.n	800057c <DIO_setupPinMode+0x18c>

		case PORTD_ID:
			DIOD_MODER_REG = (DIOD_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 80004be:	4b35      	ldr	r3, [pc, #212]	; (8000594 <DIO_setupPinMode+0x1a4>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	79ba      	ldrb	r2, [r7, #6]
 80004c4:	0052      	lsls	r2, r2, #1
 80004c6:	2103      	movs	r1, #3
 80004c8:	fa01 f202 	lsl.w	r2, r1, r2
 80004cc:	43d2      	mvns	r2, r2
 80004ce:	4013      	ands	r3, r2
 80004d0:	7979      	ldrb	r1, [r7, #5]
 80004d2:	79ba      	ldrb	r2, [r7, #6]
 80004d4:	0052      	lsls	r2, r2, #1
 80004d6:	fa01 f202 	lsl.w	r2, r1, r2
 80004da:	4611      	mov	r1, r2
 80004dc:	4a2d      	ldr	r2, [pc, #180]	; (8000594 <DIO_setupPinMode+0x1a4>)
 80004de:	430b      	orrs	r3, r1
 80004e0:	6013      	str	r3, [r2, #0]
			break;
 80004e2:	e04b      	b.n	800057c <DIO_setupPinMode+0x18c>

		case PORTE_ID:
			DIOE_MODER_REG = (DIOE_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 80004e4:	4b2c      	ldr	r3, [pc, #176]	; (8000598 <DIO_setupPinMode+0x1a8>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	79ba      	ldrb	r2, [r7, #6]
 80004ea:	0052      	lsls	r2, r2, #1
 80004ec:	2103      	movs	r1, #3
 80004ee:	fa01 f202 	lsl.w	r2, r1, r2
 80004f2:	43d2      	mvns	r2, r2
 80004f4:	4013      	ands	r3, r2
 80004f6:	7979      	ldrb	r1, [r7, #5]
 80004f8:	79ba      	ldrb	r2, [r7, #6]
 80004fa:	0052      	lsls	r2, r2, #1
 80004fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000500:	4611      	mov	r1, r2
 8000502:	4a25      	ldr	r2, [pc, #148]	; (8000598 <DIO_setupPinMode+0x1a8>)
 8000504:	430b      	orrs	r3, r1
 8000506:	6013      	str	r3, [r2, #0]
			break;
 8000508:	e038      	b.n	800057c <DIO_setupPinMode+0x18c>

		case PORTF_ID:
			DIOF_MODER_REG = (DIOF_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 800050a:	4b24      	ldr	r3, [pc, #144]	; (800059c <DIO_setupPinMode+0x1ac>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	79ba      	ldrb	r2, [r7, #6]
 8000510:	0052      	lsls	r2, r2, #1
 8000512:	2103      	movs	r1, #3
 8000514:	fa01 f202 	lsl.w	r2, r1, r2
 8000518:	43d2      	mvns	r2, r2
 800051a:	4013      	ands	r3, r2
 800051c:	7979      	ldrb	r1, [r7, #5]
 800051e:	79ba      	ldrb	r2, [r7, #6]
 8000520:	0052      	lsls	r2, r2, #1
 8000522:	fa01 f202 	lsl.w	r2, r1, r2
 8000526:	4611      	mov	r1, r2
 8000528:	4a1c      	ldr	r2, [pc, #112]	; (800059c <DIO_setupPinMode+0x1ac>)
 800052a:	430b      	orrs	r3, r1
 800052c:	6013      	str	r3, [r2, #0]
			break;
 800052e:	e025      	b.n	800057c <DIO_setupPinMode+0x18c>

		case PORTG_ID:
			DIOG_MODER_REG = (DIOG_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <DIO_setupPinMode+0x1b0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	79ba      	ldrb	r2, [r7, #6]
 8000536:	0052      	lsls	r2, r2, #1
 8000538:	2103      	movs	r1, #3
 800053a:	fa01 f202 	lsl.w	r2, r1, r2
 800053e:	43d2      	mvns	r2, r2
 8000540:	4013      	ands	r3, r2
 8000542:	7979      	ldrb	r1, [r7, #5]
 8000544:	79ba      	ldrb	r2, [r7, #6]
 8000546:	0052      	lsls	r2, r2, #1
 8000548:	fa01 f202 	lsl.w	r2, r1, r2
 800054c:	4611      	mov	r1, r2
 800054e:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <DIO_setupPinMode+0x1b0>)
 8000550:	430b      	orrs	r3, r1
 8000552:	6013      	str	r3, [r2, #0]
			break;
 8000554:	e012      	b.n	800057c <DIO_setupPinMode+0x18c>

		case PORTH_ID:
			DIOH_MODER_REG = (DIOH_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <DIO_setupPinMode+0x1b4>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	79ba      	ldrb	r2, [r7, #6]
 800055c:	0052      	lsls	r2, r2, #1
 800055e:	2103      	movs	r1, #3
 8000560:	fa01 f202 	lsl.w	r2, r1, r2
 8000564:	43d2      	mvns	r2, r2
 8000566:	4013      	ands	r3, r2
 8000568:	7979      	ldrb	r1, [r7, #5]
 800056a:	79ba      	ldrb	r2, [r7, #6]
 800056c:	0052      	lsls	r2, r2, #1
 800056e:	fa01 f202 	lsl.w	r2, r1, r2
 8000572:	4611      	mov	r1, r2
 8000574:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <DIO_setupPinMode+0x1b4>)
 8000576:	430b      	orrs	r3, r1
 8000578:	6013      	str	r3, [r2, #0]
			break;
 800057a:	bf00      	nop
		}
	}

	return Ret_Val;
 800057c:	7bfb      	ldrb	r3, [r7, #15]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	48000400 	.word	0x48000400
 8000590:	48000800 	.word	0x48000800
 8000594:	48000c00 	.word	0x48000c00
 8000598:	48001000 	.word	0x48001000
 800059c:	48001400 	.word	0x48001400
 80005a0:	48001800 	.word	0x48001800
 80005a4:	48001c00 	.word	0x48001c00

080005a8 <DIO_writePin>:

STD_ReturnState DIO_writePin(DIO_PortID portID, DIO_PinID pinID, DIO_PinLevel pinLevel)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	460b      	mov	r3, r1
 80005b4:	71bb      	strb	r3, [r7, #6]
 80005b6:	4613      	mov	r3, r2
 80005b8:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = E_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]

	if(portID >= NUM_OF_PORTS || pinID >= NUM_OF_PINS_PER_PORT)
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d802      	bhi.n	80005ca <DIO_writePin+0x22>
 80005c4:	79bb      	ldrb	r3, [r7, #6]
 80005c6:	2b0e      	cmp	r3, #14
 80005c8:	d902      	bls.n	80005d0 <DIO_writePin+0x28>
	{
		Ret_Val = E_NOT_OK;
 80005ca:	2301      	movs	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e0e7      	b.n	80007a0 <DIO_writePin+0x1f8>
	}

	else
	{
		switch(portID)
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	f200 80e4 	bhi.w	80007a0 <DIO_writePin+0x1f8>
 80005d8:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <DIO_writePin+0x38>)
 80005da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005de:	bf00      	nop
 80005e0:	08000601 	.word	0x08000601
 80005e4:	08000635 	.word	0x08000635
 80005e8:	08000669 	.word	0x08000669
 80005ec:	0800069d 	.word	0x0800069d
 80005f0:	080006d1 	.word	0x080006d1
 80005f4:	08000705 	.word	0x08000705
 80005f8:	08000739 	.word	0x08000739
 80005fc:	0800076d 	.word	0x0800076d
		{
		case PORTA_ID:
			if(pinLevel == LOGIC_LOW)
 8000600:	797b      	ldrb	r3, [r7, #5]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d10b      	bne.n	800061e <DIO_writePin+0x76>
			{
				CLEAR_BIT(DIOA_ODR_REG, pinID);
 8000606:	4b6a      	ldr	r3, [pc, #424]	; (80007b0 <DIO_writePin+0x208>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	79ba      	ldrb	r2, [r7, #6]
 800060c:	2101      	movs	r1, #1
 800060e:	fa01 f202 	lsl.w	r2, r1, r2
 8000612:	43d2      	mvns	r2, r2
 8000614:	4611      	mov	r1, r2
 8000616:	4a66      	ldr	r2, [pc, #408]	; (80007b0 <DIO_writePin+0x208>)
 8000618:	400b      	ands	r3, r1
 800061a:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOA_ODR_REG, pinID);
			}
			break;
 800061c:	e0c0      	b.n	80007a0 <DIO_writePin+0x1f8>
				SET_BIT(DIOA_ODR_REG, pinID);
 800061e:	4b64      	ldr	r3, [pc, #400]	; (80007b0 <DIO_writePin+0x208>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	79ba      	ldrb	r2, [r7, #6]
 8000624:	2101      	movs	r1, #1
 8000626:	fa01 f202 	lsl.w	r2, r1, r2
 800062a:	4611      	mov	r1, r2
 800062c:	4a60      	ldr	r2, [pc, #384]	; (80007b0 <DIO_writePin+0x208>)
 800062e:	430b      	orrs	r3, r1
 8000630:	6013      	str	r3, [r2, #0]
			break;
 8000632:	e0b5      	b.n	80007a0 <DIO_writePin+0x1f8>

		case PORTB_ID:
			if(pinLevel == LOGIC_LOW)
 8000634:	797b      	ldrb	r3, [r7, #5]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10b      	bne.n	8000652 <DIO_writePin+0xaa>
			{
				CLEAR_BIT(DIOB_ODR_REG, pinID);
 800063a:	4b5e      	ldr	r3, [pc, #376]	; (80007b4 <DIO_writePin+0x20c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	79ba      	ldrb	r2, [r7, #6]
 8000640:	2101      	movs	r1, #1
 8000642:	fa01 f202 	lsl.w	r2, r1, r2
 8000646:	43d2      	mvns	r2, r2
 8000648:	4611      	mov	r1, r2
 800064a:	4a5a      	ldr	r2, [pc, #360]	; (80007b4 <DIO_writePin+0x20c>)
 800064c:	400b      	ands	r3, r1
 800064e:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOB_ODR_REG, pinID);
			}
			break;
 8000650:	e0a6      	b.n	80007a0 <DIO_writePin+0x1f8>
				SET_BIT(DIOB_ODR_REG, pinID);
 8000652:	4b58      	ldr	r3, [pc, #352]	; (80007b4 <DIO_writePin+0x20c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	79ba      	ldrb	r2, [r7, #6]
 8000658:	2101      	movs	r1, #1
 800065a:	fa01 f202 	lsl.w	r2, r1, r2
 800065e:	4611      	mov	r1, r2
 8000660:	4a54      	ldr	r2, [pc, #336]	; (80007b4 <DIO_writePin+0x20c>)
 8000662:	430b      	orrs	r3, r1
 8000664:	6013      	str	r3, [r2, #0]
			break;
 8000666:	e09b      	b.n	80007a0 <DIO_writePin+0x1f8>

		case PORTC_ID:
			if(pinLevel == LOGIC_LOW)
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10b      	bne.n	8000686 <DIO_writePin+0xde>
			{
				CLEAR_BIT(DIOC_ODR_REG, pinID);
 800066e:	4b52      	ldr	r3, [pc, #328]	; (80007b8 <DIO_writePin+0x210>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	79ba      	ldrb	r2, [r7, #6]
 8000674:	2101      	movs	r1, #1
 8000676:	fa01 f202 	lsl.w	r2, r1, r2
 800067a:	43d2      	mvns	r2, r2
 800067c:	4611      	mov	r1, r2
 800067e:	4a4e      	ldr	r2, [pc, #312]	; (80007b8 <DIO_writePin+0x210>)
 8000680:	400b      	ands	r3, r1
 8000682:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOC_ODR_REG, pinID);
			}
			break;
 8000684:	e08c      	b.n	80007a0 <DIO_writePin+0x1f8>
				SET_BIT(DIOC_ODR_REG, pinID);
 8000686:	4b4c      	ldr	r3, [pc, #304]	; (80007b8 <DIO_writePin+0x210>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	79ba      	ldrb	r2, [r7, #6]
 800068c:	2101      	movs	r1, #1
 800068e:	fa01 f202 	lsl.w	r2, r1, r2
 8000692:	4611      	mov	r1, r2
 8000694:	4a48      	ldr	r2, [pc, #288]	; (80007b8 <DIO_writePin+0x210>)
 8000696:	430b      	orrs	r3, r1
 8000698:	6013      	str	r3, [r2, #0]
			break;
 800069a:	e081      	b.n	80007a0 <DIO_writePin+0x1f8>

		case PORTD_ID:
			if(pinLevel == LOGIC_LOW)
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d10b      	bne.n	80006ba <DIO_writePin+0x112>
			{
				CLEAR_BIT(DIOD_ODR_REG, pinID);
 80006a2:	4b46      	ldr	r3, [pc, #280]	; (80007bc <DIO_writePin+0x214>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	79ba      	ldrb	r2, [r7, #6]
 80006a8:	2101      	movs	r1, #1
 80006aa:	fa01 f202 	lsl.w	r2, r1, r2
 80006ae:	43d2      	mvns	r2, r2
 80006b0:	4611      	mov	r1, r2
 80006b2:	4a42      	ldr	r2, [pc, #264]	; (80007bc <DIO_writePin+0x214>)
 80006b4:	400b      	ands	r3, r1
 80006b6:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOD_ODR_REG, pinID);
			}
			break;
 80006b8:	e072      	b.n	80007a0 <DIO_writePin+0x1f8>
				SET_BIT(DIOD_ODR_REG, pinID);
 80006ba:	4b40      	ldr	r3, [pc, #256]	; (80007bc <DIO_writePin+0x214>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	79ba      	ldrb	r2, [r7, #6]
 80006c0:	2101      	movs	r1, #1
 80006c2:	fa01 f202 	lsl.w	r2, r1, r2
 80006c6:	4611      	mov	r1, r2
 80006c8:	4a3c      	ldr	r2, [pc, #240]	; (80007bc <DIO_writePin+0x214>)
 80006ca:	430b      	orrs	r3, r1
 80006cc:	6013      	str	r3, [r2, #0]
			break;
 80006ce:	e067      	b.n	80007a0 <DIO_writePin+0x1f8>

		case PORTE_ID:
			if(pinLevel == LOGIC_LOW)
 80006d0:	797b      	ldrb	r3, [r7, #5]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10b      	bne.n	80006ee <DIO_writePin+0x146>
			{
				CLEAR_BIT(DIOE_ODR_REG, pinID);
 80006d6:	4b3a      	ldr	r3, [pc, #232]	; (80007c0 <DIO_writePin+0x218>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	79ba      	ldrb	r2, [r7, #6]
 80006dc:	2101      	movs	r1, #1
 80006de:	fa01 f202 	lsl.w	r2, r1, r2
 80006e2:	43d2      	mvns	r2, r2
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a36      	ldr	r2, [pc, #216]	; (80007c0 <DIO_writePin+0x218>)
 80006e8:	400b      	ands	r3, r1
 80006ea:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOE_ODR_REG, pinID);
			}
			break;
 80006ec:	e058      	b.n	80007a0 <DIO_writePin+0x1f8>
				SET_BIT(DIOE_ODR_REG, pinID);
 80006ee:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <DIO_writePin+0x218>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	79ba      	ldrb	r2, [r7, #6]
 80006f4:	2101      	movs	r1, #1
 80006f6:	fa01 f202 	lsl.w	r2, r1, r2
 80006fa:	4611      	mov	r1, r2
 80006fc:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <DIO_writePin+0x218>)
 80006fe:	430b      	orrs	r3, r1
 8000700:	6013      	str	r3, [r2, #0]
			break;
 8000702:	e04d      	b.n	80007a0 <DIO_writePin+0x1f8>

		case PORTF_ID:
			if(pinLevel == LOGIC_LOW)
 8000704:	797b      	ldrb	r3, [r7, #5]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d10b      	bne.n	8000722 <DIO_writePin+0x17a>
			{
				CLEAR_BIT(DIOF_ODR_REG, pinID);
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <DIO_writePin+0x21c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	79ba      	ldrb	r2, [r7, #6]
 8000710:	2101      	movs	r1, #1
 8000712:	fa01 f202 	lsl.w	r2, r1, r2
 8000716:	43d2      	mvns	r2, r2
 8000718:	4611      	mov	r1, r2
 800071a:	4a2a      	ldr	r2, [pc, #168]	; (80007c4 <DIO_writePin+0x21c>)
 800071c:	400b      	ands	r3, r1
 800071e:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOF_ODR_REG, pinID);
			}
			break;
 8000720:	e03e      	b.n	80007a0 <DIO_writePin+0x1f8>
				SET_BIT(DIOF_ODR_REG, pinID);
 8000722:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <DIO_writePin+0x21c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	79ba      	ldrb	r2, [r7, #6]
 8000728:	2101      	movs	r1, #1
 800072a:	fa01 f202 	lsl.w	r2, r1, r2
 800072e:	4611      	mov	r1, r2
 8000730:	4a24      	ldr	r2, [pc, #144]	; (80007c4 <DIO_writePin+0x21c>)
 8000732:	430b      	orrs	r3, r1
 8000734:	6013      	str	r3, [r2, #0]
			break;
 8000736:	e033      	b.n	80007a0 <DIO_writePin+0x1f8>

		case PORTG_ID:
			if(pinLevel == LOGIC_LOW)
 8000738:	797b      	ldrb	r3, [r7, #5]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d10b      	bne.n	8000756 <DIO_writePin+0x1ae>
			{
				CLEAR_BIT(DIOG_ODR_REG, pinID);
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <DIO_writePin+0x220>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	79ba      	ldrb	r2, [r7, #6]
 8000744:	2101      	movs	r1, #1
 8000746:	fa01 f202 	lsl.w	r2, r1, r2
 800074a:	43d2      	mvns	r2, r2
 800074c:	4611      	mov	r1, r2
 800074e:	4a1e      	ldr	r2, [pc, #120]	; (80007c8 <DIO_writePin+0x220>)
 8000750:	400b      	ands	r3, r1
 8000752:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOG_ODR_REG, pinID);
			}
			break;
 8000754:	e024      	b.n	80007a0 <DIO_writePin+0x1f8>
				SET_BIT(DIOG_ODR_REG, pinID);
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <DIO_writePin+0x220>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	79ba      	ldrb	r2, [r7, #6]
 800075c:	2101      	movs	r1, #1
 800075e:	fa01 f202 	lsl.w	r2, r1, r2
 8000762:	4611      	mov	r1, r2
 8000764:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <DIO_writePin+0x220>)
 8000766:	430b      	orrs	r3, r1
 8000768:	6013      	str	r3, [r2, #0]
			break;
 800076a:	e019      	b.n	80007a0 <DIO_writePin+0x1f8>

		case PORTH_ID:
			if(pinLevel == LOGIC_LOW)
 800076c:	797b      	ldrb	r3, [r7, #5]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10b      	bne.n	800078a <DIO_writePin+0x1e2>
			{
				CLEAR_BIT(DIOH_ODR_REG, pinID);
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <DIO_writePin+0x224>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	79ba      	ldrb	r2, [r7, #6]
 8000778:	2101      	movs	r1, #1
 800077a:	fa01 f202 	lsl.w	r2, r1, r2
 800077e:	43d2      	mvns	r2, r2
 8000780:	4611      	mov	r1, r2
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <DIO_writePin+0x224>)
 8000784:	400b      	ands	r3, r1
 8000786:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOH_ODR_REG, pinID);
			}
			break;
 8000788:	e009      	b.n	800079e <DIO_writePin+0x1f6>
				SET_BIT(DIOH_ODR_REG, pinID);
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <DIO_writePin+0x224>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	79ba      	ldrb	r2, [r7, #6]
 8000790:	2101      	movs	r1, #1
 8000792:	fa01 f202 	lsl.w	r2, r1, r2
 8000796:	4611      	mov	r1, r2
 8000798:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <DIO_writePin+0x224>)
 800079a:	430b      	orrs	r3, r1
 800079c:	6013      	str	r3, [r2, #0]
			break;
 800079e:	bf00      	nop
		}
	}

	return Ret_Val;
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	48000014 	.word	0x48000014
 80007b4:	48000414 	.word	0x48000414
 80007b8:	48000814 	.word	0x48000814
 80007bc:	48000c14 	.word	0x48000c14
 80007c0:	48001014 	.word	0x48001014
 80007c4:	48001414 	.word	0x48001414
 80007c8:	48001814 	.word	0x48001814
 80007cc:	48001c14 	.word	0x48001c14

080007d0 <Create_Task>:

Task_t Task_arr[Num_Tasks];


Task_t * Create_Task( Task_t task )
{
 80007d0:	b490      	push	{r4, r7}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Task_t * ptr = NULLPTR;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

	static u8 index = 0;

	if( ( task.f_ptr != NULLPTR ) &&
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d022      	beq.n	800082c <Create_Task+0x5c>
		( index < Num_Tasks     )    )
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <Create_Task+0x68>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
	if( ( task.f_ptr != NULLPTR ) &&
 80007ea:	2b09      	cmp	r3, #9
 80007ec:	d81e      	bhi.n	800082c <Create_Task+0x5c>
	{
		Task_arr[index] = task;
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <Create_Task+0x68>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4619      	mov	r1, r3
 80007f4:	4a11      	ldr	r2, [pc, #68]	; (800083c <Create_Task+0x6c>)
 80007f6:	460b      	mov	r3, r1
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	440b      	add	r3, r1
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	461c      	mov	r4, r3
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000808:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		ptr = &Task_arr[index];
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <Create_Task+0x68>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <Create_Task+0x6c>)
 800081c:	4413      	add	r3, r2
 800081e:	617b      	str	r3, [r7, #20]

		index++;
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <Create_Task+0x68>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <Create_Task+0x68>)
 800082a:	701a      	strb	r2, [r3, #0]
	}
	return ptr;
 800082c:	697b      	ldr	r3, [r7, #20]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bc90      	pop	{r4, r7}
 8000836:	4770      	bx	lr
 8000838:	20000020 	.word	0x20000020
 800083c:	20000028 	.word	0x20000028

08000840 <Sort>:
		task->state = state;
	}
}

static void Sort(void)
{
 8000840:	b490      	push	{r4, r7}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
	Task_t temp;
	for(u8 i = 0 ; i < Num_Tasks - 1 ;i++)
 8000846:	2300      	movs	r3, #0
 8000848:	73fb      	strb	r3, [r7, #15]
 800084a:	e04a      	b.n	80008e2 <Sort+0xa2>
	{
		for(u8 j = ( i + 1 ) ; j < Num_Tasks ; j++)
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	3301      	adds	r3, #1
 8000850:	73bb      	strb	r3, [r7, #14]
 8000852:	e040      	b.n	80008d6 <Sort+0x96>
		{
			if( Task_arr[j].periority < Task_arr[i].periority  )
 8000854:	7bba      	ldrb	r2, [r7, #14]
 8000856:	4927      	ldr	r1, [pc, #156]	; (80008f4 <Sort+0xb4>)
 8000858:	4613      	mov	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	440b      	add	r3, r1
 8000862:	3308      	adds	r3, #8
 8000864:	7819      	ldrb	r1, [r3, #0]
 8000866:	7bfa      	ldrb	r2, [r7, #15]
 8000868:	4822      	ldr	r0, [pc, #136]	; (80008f4 <Sort+0xb4>)
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4403      	add	r3, r0
 8000874:	3308      	adds	r3, #8
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4299      	cmp	r1, r3
 800087a:	d229      	bcs.n	80008d0 <Sort+0x90>
			{
				temp = Task_arr[i];
 800087c:	7bfa      	ldrb	r2, [r7, #15]
 800087e:	491d      	ldr	r1, [pc, #116]	; (80008f4 <Sort+0xb4>)
 8000880:	4613      	mov	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	4413      	add	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	18ca      	adds	r2, r1, r3
 800088a:	463b      	mov	r3, r7
 800088c:	ca07      	ldmia	r2, {r0, r1, r2}
 800088e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				Task_arr[i] = Task_arr[j];
 8000892:	7bba      	ldrb	r2, [r7, #14]
 8000894:	7bf9      	ldrb	r1, [r7, #15]
 8000896:	4817      	ldr	r0, [pc, #92]	; (80008f4 <Sort+0xb4>)
 8000898:	460b      	mov	r3, r1
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	440b      	add	r3, r1
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4418      	add	r0, r3
 80008a2:	4914      	ldr	r1, [pc, #80]	; (80008f4 <Sort+0xb4>)
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	18ca      	adds	r2, r1, r3
 80008ae:	4603      	mov	r3, r0
 80008b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80008b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				Task_arr[j] = temp;
 80008b6:	7bba      	ldrb	r2, [r7, #14]
 80008b8:	490e      	ldr	r1, [pc, #56]	; (80008f4 <Sort+0xb4>)
 80008ba:	4613      	mov	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	4413      	add	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	440b      	add	r3, r1
 80008c4:	461c      	mov	r4, r3
 80008c6:	463b      	mov	r3, r7
 80008c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		for(u8 j = ( i + 1 ) ; j < Num_Tasks ; j++)
 80008d0:	7bbb      	ldrb	r3, [r7, #14]
 80008d2:	3301      	adds	r3, #1
 80008d4:	73bb      	strb	r3, [r7, #14]
 80008d6:	7bbb      	ldrb	r3, [r7, #14]
 80008d8:	2b09      	cmp	r3, #9
 80008da:	d9bb      	bls.n	8000854 <Sort+0x14>
	for(u8 i = 0 ; i < Num_Tasks - 1 ;i++)
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	3301      	adds	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	2b08      	cmp	r3, #8
 80008e6:	d9b1      	bls.n	800084c <Sort+0xc>
			}
		}

	}

}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc90      	pop	{r4, r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000028 	.word	0x20000028

080008f8 <Os_Init>:

static volatile u32 counter = 0;

 void Os_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
	counter++;
 80008fe:	4b25      	ldr	r3, [pc, #148]	; (8000994 <Os_Init+0x9c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	3301      	adds	r3, #1
 8000904:	4a23      	ldr	r2, [pc, #140]	; (8000994 <Os_Init+0x9c>)
 8000906:	6013      	str	r3, [r2, #0]

	for( u8 i = 0 ; i < Num_Tasks ; i++ )
 8000908:	2300      	movs	r3, #0
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	e03b      	b.n	8000986 <Os_Init+0x8e>
	{
		if(  ((  ( counter %  Task_arr[i].periodicity ) - Task_arr[i].offset  )  == 0   )   &&
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <Os_Init+0x9c>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	79f9      	ldrb	r1, [r7, #7]
 8000914:	4820      	ldr	r0, [pc, #128]	; (8000998 <Os_Init+0xa0>)
 8000916:	460b      	mov	r3, r1
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	440b      	add	r3, r1
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4403      	add	r3, r0
 8000920:	3306      	adds	r3, #6
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	fbb2 f1f3 	udiv	r1, r2, r3
 8000928:	fb03 f301 	mul.w	r3, r3, r1
 800092c:	1ad1      	subs	r1, r2, r3
 800092e:	79fa      	ldrb	r2, [r7, #7]
 8000930:	4819      	ldr	r0, [pc, #100]	; (8000998 <Os_Init+0xa0>)
 8000932:	4613      	mov	r3, r2
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	4413      	add	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4403      	add	r3, r0
 800093c:	330a      	adds	r3, #10
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	4299      	cmp	r1, r3
 8000942:	d11d      	bne.n	8000980 <Os_Init+0x88>
			  ( Task_arr[i].state == Ready	))
 8000944:	79fa      	ldrb	r2, [r7, #7]
 8000946:	4914      	ldr	r1, [pc, #80]	; (8000998 <Os_Init+0xa0>)
 8000948:	4613      	mov	r3, r2
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	4413      	add	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	440b      	add	r3, r1
 8000952:	3304      	adds	r3, #4
 8000954:	781b      	ldrb	r3, [r3, #0]
		if(  ((  ( counter %  Task_arr[i].periodicity ) - Task_arr[i].offset  )  == 0   )   &&
 8000956:	2b01      	cmp	r3, #1
 8000958:	d112      	bne.n	8000980 <Os_Init+0x88>
			 {
					Task_arr[i].state == Running;
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	4613      	mov	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	009b      	lsls	r3, r3, #2
					Task_arr[i].f_ptr();
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	490c      	ldr	r1, [pc, #48]	; (8000998 <Os_Init+0xa0>)
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	440b      	add	r3, r1
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4798      	blx	r3
					Task_arr[i].state == Ready;
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
	for( u8 i = 0 ; i < Num_Tasks ; i++ )
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	3301      	adds	r3, #1
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b09      	cmp	r3, #9
 800098a:	d9c0      	bls.n	800090e <Os_Init+0x16>

			 }
	}

}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000001c 	.word	0x2000001c
 8000998:	20000028 	.word	0x20000028

0800099c <Os_Start>:


void Os_Start(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	Sort();
 80009a0:	f7ff ff4e 	bl	8000840 <Sort>
	sysTick_init(AHB_8, Os_Init);
 80009a4:	4904      	ldr	r1, [pc, #16]	; (80009b8 <Os_Start+0x1c>)
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 f816 	bl	80009d8 <sysTick_init>
	sysTick_start(1000);
 80009ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b0:	f000 f83e 	bl	8000a30 <sysTick_start>

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	080008f9 	.word	0x080008f9

080009bc <SysTick_Handler>:


static volatile void(*g_callBackPtr)(void) = NULLPTR;

void SysTick_Handler (void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	if(g_callBackPtr != NULLPTR)
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <SysTick_Handler+0x18>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <SysTick_Handler+0x12>
	{
		g_callBackPtr();
 80009c8:	4b02      	ldr	r3, [pc, #8]	; (80009d4 <SysTick_Handler+0x18>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4798      	blx	r3
	}
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000024 	.word	0x20000024

080009d8 <sysTick_init>:

void sysTick_init(systick_clock_t clock, void (*fPtr)(void))
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
	if(fPtr == NULLPTR)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d106      	bne.n	80009f8 <sysTick_init+0x20>
	{
		CLEAR_BIT(SYSTICK_STK_CTRL_REG, 1);
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <sysTick_init+0x50>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <sysTick_init+0x50>)
 80009f0:	f023 0302 	bic.w	r3, r3, #2
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	e008      	b.n	8000a0a <sysTick_init+0x32>
	}
	else
	{
		SET_BIT(SYSTICK_STK_CTRL_REG, 1);
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <sysTick_init+0x50>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <sysTick_init+0x50>)
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	6013      	str	r3, [r2, #0]
		g_callBackPtr = fPtr;
 8000a04:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <sysTick_init+0x54>)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	6013      	str	r3, [r2, #0]
	}

	SYSTICK_STK_CTRL_REG |= (clock<<2);
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <sysTick_init+0x50>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	79fa      	ldrb	r2, [r7, #7]
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	4611      	mov	r1, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <sysTick_init+0x50>)
 8000a16:	430b      	orrs	r3, r1
 8000a18:	6013      	str	r3, [r2, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000e010 	.word	0xe000e010
 8000a2c:	20000024 	.word	0x20000024

08000a30 <sysTick_start>:

void sysTick_start(u32 loadVal)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	SYSTICK_STK_LOAD_REG = loadVal;
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <sysTick_start+0x28>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
	SET_BIT(SYSTICK_STK_CTRL_REG, 0);
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <sysTick_start+0x2c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <sysTick_start+0x2c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6013      	str	r3, [r2, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e014 	.word	0xe000e014
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <__libc_init_array>:
 8000a60:	b570      	push	{r4, r5, r6, lr}
 8000a62:	4e0d      	ldr	r6, [pc, #52]	; (8000a98 <__libc_init_array+0x38>)
 8000a64:	4c0d      	ldr	r4, [pc, #52]	; (8000a9c <__libc_init_array+0x3c>)
 8000a66:	1ba4      	subs	r4, r4, r6
 8000a68:	10a4      	asrs	r4, r4, #2
 8000a6a:	2500      	movs	r5, #0
 8000a6c:	42a5      	cmp	r5, r4
 8000a6e:	d109      	bne.n	8000a84 <__libc_init_array+0x24>
 8000a70:	4e0b      	ldr	r6, [pc, #44]	; (8000aa0 <__libc_init_array+0x40>)
 8000a72:	4c0c      	ldr	r4, [pc, #48]	; (8000aa4 <__libc_init_array+0x44>)
 8000a74:	f000 f818 	bl	8000aa8 <_init>
 8000a78:	1ba4      	subs	r4, r4, r6
 8000a7a:	10a4      	asrs	r4, r4, #2
 8000a7c:	2500      	movs	r5, #0
 8000a7e:	42a5      	cmp	r5, r4
 8000a80:	d105      	bne.n	8000a8e <__libc_init_array+0x2e>
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a88:	4798      	blx	r3
 8000a8a:	3501      	adds	r5, #1
 8000a8c:	e7ee      	b.n	8000a6c <__libc_init_array+0xc>
 8000a8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a92:	4798      	blx	r3
 8000a94:	3501      	adds	r5, #1
 8000a96:	e7f2      	b.n	8000a7e <__libc_init_array+0x1e>
 8000a98:	08000ac0 	.word	0x08000ac0
 8000a9c:	08000ac0 	.word	0x08000ac0
 8000aa0:	08000ac0 	.word	0x08000ac0
 8000aa4:	08000ac4 	.word	0x08000ac4

08000aa8 <_init>:
 8000aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aaa:	bf00      	nop
 8000aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aae:	bc08      	pop	{r3}
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	4770      	bx	lr

08000ab4 <_fini>:
 8000ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab6:	bf00      	nop
 8000ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aba:	bc08      	pop	{r3}
 8000abc:	469e      	mov	lr, r3
 8000abe:	4770      	bx	lr
